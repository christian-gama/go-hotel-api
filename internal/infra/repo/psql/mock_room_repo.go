// Code generated by mockery v2.14.0. DO NOT EDIT.

package psql

import (
	entity "github.com/christian-gama/go-booking-api/internal/domain/entity"
	errorutil "github.com/christian-gama/go-booking-api/internal/domain/errorutil"

	mock "github.com/stretchr/testify/mock"
)

// MockroomRepo is an autogenerated mock type for the roomRepo type
type MockroomRepo struct {
	mock.Mock
}

// DeleteRoom provides a mock function with given fields: uuid
func (_m *MockroomRepo) DeleteRoom(uuid string) []*errorutil.Error {
	ret := _m.Called(uuid)

	var r0 []*errorutil.Error
	if rf, ok := ret.Get(0).(func(string) []*errorutil.Error); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*errorutil.Error)
		}
	}

	return r0
}

// GetRoom provides a mock function with given fields: uuid
func (_m *MockroomRepo) GetRoom(uuid string) (*entity.Room, []*errorutil.Error) {
	ret := _m.Called(uuid)

	var r0 *entity.Room
	if rf, ok := ret.Get(0).(func(string) *entity.Room); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Room)
		}
	}

	var r1 []*errorutil.Error
	if rf, ok := ret.Get(1).(func(string) []*errorutil.Error); ok {
		r1 = rf(uuid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*errorutil.Error)
		}
	}

	return r0, r1
}

// ListRooms provides a mock function with given fields:
func (_m *MockroomRepo) ListRooms() ([]*entity.Room, []*errorutil.Error) {
	ret := _m.Called()

	var r0 []*entity.Room
	if rf, ok := ret.Get(0).(func() []*entity.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Room)
		}
	}

	var r1 []*errorutil.Error
	if rf, ok := ret.Get(1).(func() []*errorutil.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*errorutil.Error)
		}
	}

	return r0, r1
}

// SaveRoom provides a mock function with given fields: room
func (_m *MockroomRepo) SaveRoom(room *entity.Room) (*entity.Room, []*errorutil.Error) {
	ret := _m.Called(room)

	var r0 *entity.Room
	if rf, ok := ret.Get(0).(func(*entity.Room) *entity.Room); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Room)
		}
	}

	var r1 []*errorutil.Error
	if rf, ok := ret.Get(1).(func(*entity.Room) []*errorutil.Error); ok {
		r1 = rf(room)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*errorutil.Error)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewMockroomRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockroomRepo creates a new instance of MockroomRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockroomRepo(t mockConstructorTestingTNewMockroomRepo) *MockroomRepo {
	mock := &MockroomRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
