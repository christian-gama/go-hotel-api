// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/christian-gama/go-booking-api/internal/room/app/dto"
	entity "github.com/christian-gama/go-booking-api/internal/room/domain/entity"

	errorutil "github.com/christian-gama/go-booking-api/internal/shared/domain/errorutil"

	mock "github.com/stretchr/testify/mock"
)

// CreateRoomService is an autogenerated mock type for the CreateRoomService type
type CreateRoomService struct {
	mock.Mock
}

// Handle provides a mock function with given fields: input
func (_m *CreateRoomService) Handle(input *dto.CreateRoom) (*entity.Room, []*errorutil.Error) {
	ret := _m.Called(input)

	var r0 *entity.Room
	if rf, ok := ret.Get(0).(func(*dto.CreateRoom) *entity.Room); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Room)
		}
	}

	var r1 []*errorutil.Error
	if rf, ok := ret.Get(1).(func(*dto.CreateRoom) []*errorutil.Error); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*errorutil.Error)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCreateRoomService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCreateRoomService creates a new instance of CreateRoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCreateRoomService(t mockConstructorTestingTNewCreateRoomService) *CreateRoomService {
	mock := &CreateRoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
