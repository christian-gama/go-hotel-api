// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/christian-gama/go-booking-api/internal/person/domain/entity"
	error "github.com/christian-gama/go-booking-api/internal/shared/domain/error"

	mock "github.com/stretchr/testify/mock"

	usecase "github.com/christian-gama/go-booking-api/internal/person/usecase"
)

// CreatePersonUsecase is an autogenerated mock type for the CreatePersonUsecase type
type CreatePersonUsecase struct {
	mock.Mock
}

// Handle provides a mock function with given fields: input
func (_m *CreatePersonUsecase) Handle(input *usecase.CreatePersonInput) (*entity.Person, error.Errors) {
	ret := _m.Called(input)

	var r0 *entity.Person
	if rf, ok := ret.Get(0).(func(*usecase.CreatePersonInput) *entity.Person); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	var r1 error.Errors
	if rf, ok := ret.Get(1).(func(*usecase.CreatePersonInput) error.Errors); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(error.Errors)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCreatePersonUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCreatePersonUsecase creates a new instance of CreatePersonUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCreatePersonUsecase(t mockConstructorTestingTNewCreatePersonUsecase) *CreatePersonUsecase {
	mock := &CreatePersonUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
